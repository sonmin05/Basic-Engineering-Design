
#include <MsTimer2.h>
#define test_pin 45
#define A0pin A0
#define SIpin 23
#define CLKpin 22
#define NPIXELS 128

#define ENA 12
#define IN1 8
#define IN2 9
#define IN3 10
#define IN4 11
#define ENB 13

byte Pixel[NPIXELS];
byte Threshold_Data[NPIXELS];

int LineSensor_Data[NPIXELS];
int LineSensor_Data_Adaption[NPIXELS];
int MAX_LineSensor_Data[NPIXELS];
int MIN_LineSensor_Data[NPIXELS];
int flag_line_adapation;

const int IMG_WIDTH_HALF = 64;
const int BASE_SPEED = 70;
const float KP = 4.0;
const float KD = 0.2;
float error_old = 0.0;

#define FASTADC 1
#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
// Switch on LED on and off each half second

void setup()
{

  MsTimer2::set(175, line_tracer); // 175ms 주기
  MsTimer2::start();
  int i;
  for (i = 0; i < NPIXELS; i++)
  {
    LineSensor_Data[i] = 0;
    LineSensor_Data_Adaption[i] = 0;
    MAX_LineSensor_Data[i] = 1023;
    MIN_LineSensor_Data[i] = 0;
  }
  pinMode(SIpin, OUTPUT);
  pinMode(CLKpin, OUTPUT);
  pinMode(A0pin, INPUT);


  digitalWrite(SIpin, LOW);
  digitalWrite(CLKpin, LOW);

#if FASTADC
  sbi(ADCSRA, ADPS2);
  cbi(ADCSRA, ADPS1);
  cbi(ADCSRA, ADPS0);
#endif

  flag_line_adapation = 0;

  pinMode(test_pin, OUTPUT);
  
  Serial.begin(115200);
  //Serial.println("TSL1401");
  

}

/////////////////////////////////////////////////////
void motor_l(int speed)
{
  if (speed >= 0)
  {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    analogWrite(ENA, speed); // 0-255
  }
  else
  {
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    analogWrite(ENA, -speed);
  }
}

void motor_r(int speed)
{
  if (speed >= 0)
  {
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    analogWrite(ENB, speed); // 0-255
  }
  else
  {
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    analogWrite(ENB, -speed);
  }
}

void motor_control(int left_motor_speed, int right_motor_speed)
{
  motor_l(left_motor_speed);
  motor_r(right_motor_speed);
}

////////////////////////////////////////////////////

void threshold_line_image(int threshold_value)
{
  digitalWrite(test_pin, HIGH);
  Serial.println("HIGH");
  for (int i = 0; i < NPIXELS; i++)
  {
    
 (Pixel[i] >= threshold_value)
    {
      Threshold_Data[i] = 255;
    }
    else
    {
      Threshold_Data[i] = 0;
    }
  }
  digitalWrite(test_pin, LOW);
  Serial.println("LOW");
}


void line_control(int line_center)

{
  digitalWrite(test_pin, HIGH);
  //Serial.println("HIGH");

  int error = line_center - IMG_WIDTH_HALF;
  int derivative = error - error_old;
  float output = KP * error + KD * derivative;
  int speed_difference = int(output);

  int right_speed = BASE_SPEED - speed_difference;
  int left_speed  = BASE_SPEED + speed_difference;

  left_speed = constrain(left_speed, 0, 100);
  right_speed = constrain(right_speed, 0, 100);
  Serial.println(left_speed);
  Serial.println(right_speed);


  motor_control(left_speed, right_speed);

  error_old = error;
  digitalWrite(test_pin, LOW);
  //Serial.println("LOW");


}



void read_line_camera(void)
{
  digitalWrite(test_pin, HIGH);
  Serial.println("HIGH");
  int i;
  delay(1);

  digitalWrite(CLKpin, LOW);
  digitalWrite(SIpin, HIGH);
  digitalWrite(CLKpin, HIGH);
  digitalWrite(SIpin, LOW);
  delayMicroseconds(1);

  for (i = 0; i < NPIXELS; i++)
  {
    Pixel[i] = analogRead(A0pin) / 4;
    digitalWrite(CLKpin, LOW);
    delayMicroseconds(1);
    digitalWrite(CLKpin, HIGH);
  }
  digitalWrite(CLKpin, LOW);
  digitalWrite(test_pin, LOW);
  Serial.println("LOW");
}

double line_COM(void)
{
  digitalWrite(test_pin, HIGH);
  //Serial.println("HIGH");
  double COM = 0.0;
  double mass_sum = 0.0;

  for (int i = 0; i < NPIXELS; i++)
  {
    mass_sum += Threshold_Data[i];
    COM += Threshold_Data[i] * i;
  }

  if (mass_sum == 0)
  {
    return -1;
  }

  COM = COM / mass_sum;

  digitalWrite(test_pin, LOW);
  //Serial.println("LOW");
  return COM;
}


void line_tracer()
{
  //Serial.print("a");
  double cx = 64;
  read_line_camera(); //16.45ms
  threshold_line_image(150); //0.5ms
  cx = line_COM(); //0.005ms
  line_control(cx); //0.6ms
}



void loop()
{
  //line_tracer();
}
